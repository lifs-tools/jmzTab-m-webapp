/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.29).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.lifstools.mztab2.server.api;

import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import org.lifstools.mztab2.model.MzTab;
import java.io.IOException;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
import java.util.Optional;
import javax.servlet.http.HttpServletRequest;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2022-12-02T17:14:56.294Z")

@Validated
@io.swagger.v3.oas.annotations.tags.Tag(name="convert", description = "the convertPlain API")
@RequestMapping(value = "/rest/v2/")
public interface ConvertPlainApi {

    Logger log = LoggerFactory.getLogger(ConvertPlainApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().
            map(r ->
                r.getHeader("Accept"));
    }
    
    @io.swagger.v3.oas.annotations.Operation(summary = "convertPlainMzTabFile", description = "Converts an mzTab file in tab separated format to XML or JSON representation. If this method returns an error code 422, the provided file did not pass validation. ", tags={ "convertPlain"})
//    @ApiOperation(value = "", nickname = "convertPlainMzTabFile", notes = "Converts an mzTab file in tab separated format to XML or JSON representation. If this method returns an error code 422, the provided file did not pass validation. ", response = MzTab.class, tags={ "convertPlain", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode ="200", description ="Conversion Okay", content = @Content(schema = @Schema(implementation = MzTab.class))),
        @ApiResponse(responseCode ="415", description ="Unsupported content type"),
        @ApiResponse(responseCode ="422", description ="Invalid input"),
        @ApiResponse(responseCode ="200", description ="Unexpected error") })
    @RequestMapping(value = "/convertPlain",
        produces = { "text/tab-separated-values" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.POST)
    default ResponseEntity<MzTab> convertPlainMzTabFile(@Parameter(description = "mzTab file that should be converted." ,required=true )  @Valid @RequestBody String mztabfile) {
        String accept = getAcceptHeader().get();
        if (accept != null && accept.contains("")) {
            try {
                return new ResponseEntity<MzTab>(getObjectMapper().get().readValue("", MzTab.class), HttpStatus.NOT_IMPLEMENTED);
            } catch (IOException e) {
                log.error("Couldn't serialize response for content type ", e);
                return new ResponseEntity<MzTab>(HttpStatus.INTERNAL_SERVER_ERROR);
            }
        }

        return new ResponseEntity<MzTab>(HttpStatus.NOT_IMPLEMENTED);
    }

}
